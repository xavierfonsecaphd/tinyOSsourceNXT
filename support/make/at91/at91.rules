define NXTMOTEHW_HELP

 NXTMOTEHW extras:

   debug    : compile with minimal optimization and debug symbols

endef
HELP += $(NXTMOTEHW_HELP)

GAS = arm-elf-gcc -c # This ensures .c and .s compiled object are compatible

#rup
CC      = arm-elf-gcc-4.7
CFLAGS  += -Wall -g -mcpu=arm7tdmi -I.
CFLAGS += -Wa,-adhlns=app.lst 

# Override the default linker script .text section start address
#LDFLAGS = -Ttext=0x100000
LDFLAGS = -nostartfiles

OBJCOPY = arm-elf-objcopy
OBJDUMP = arm-elf-objdump
NCC = ncc
LIBS = -lm

FLASHEXE = fwflash.exe

BUILDDIR = build/nxtmote
MAIN_EXE = $(BUILDDIR)/main.exe
MAIN_SREC = $(BUILDDIR)/main.srec
MAIN_IHEX = $(BUILDDIR)/main.ihex
MAIN_HEX = $(BUILDDIR)/main.hex
NXTMOTW_RFW = $(BUILDDIR)/nxtmote.rfw #To use LEGO NXT LABVIEW to download
MAIN_BIN = $(BUILDDIR)/nxtmote.bin
INSTALL_SREC = $(MAIN_SREC).out$(if $(NODEID),-$(NODEID),)
VOLUMEFILE = volumes-at45db.xml
ASSEMBLY_OBJS =  $(BUILDDIR)/Cstartup.o
C_OBJS =
#C_OBJS =  $(BUILDDIR)/Cstartup_SAM7.o 
#C_OBJS += $(BUILDDIR)/c_output.o $(BUILDDIR)/d_output.o $(BUILDDIR)/c_ioctrl.o $(BUILDDIR)/d_ioctrl.o
PFLAGS += -Wall -Wshadow -DDEF_TOS_AM_GROUP=$(DEFAULT_LOCAL_GROUP) $(NESC_FLAGS)
PFLAGS += -target=$(PLATFORM) -fnesc-cfile=$(BUILDDIR)/app.c
#PFLAGS += -save-temps
ifdef MSG_SIZE
PFLAGS += -DTOSH_DATA_LENGTH=$(MSG_SIZE)
endif

BUILDLESS_DEPS += bytes

# Build storage file if volumes.xml present
# We "steal" the at45db storage spec
ifneq ($(wildcard $(VOLUMEFILE)), )
exe0: $(BUILDDIR)/StorageVolumes.h

$(BUILDDIR)/StorageVolumes.h: $(VOLUMEFILE)
	tos-storage-at45db <$(VOLUMEFILE) >$@

PFLAGS += -I$(BUILDDIR)
endif

ifndef BUILD_DEPS
  ifeq ($(filter $(BUILDLESS_DEPS),$(GOALS)),)
    BUILD_DEPS = exe bytes $(POST_BUILD_EXTRA_DEPS)
  endif
endif

exe: exe0 hex bytes FORCE
	@:

exe0: builddir asms $(BUILD_EXTRA_DEPS) FORCE
	@echo "    compiling $(COMPONENT) to a $(PLATFORM) binary"
	@echo "    NXTMOTE INFO: $(NCC) -v -o $(MAIN_EXE) $(OPTFLAGS) $(PFLAGS) $(CFLAGS) $(COMPONENT).nc $(LIBS) $(LDFLAGS) $(ASSEMBLY_OBJS) $(LIBRARY_OBJS)"
	@echo "    CFLAGS: $(CFLAGS)"
	#$(NCC)  -save-temps -v -fnesc-verbose -o $(MAIN_EXE) $(OPTFLAGS) $(PFLAGS) $(CFLAGS) $(COMPONENT).nc $(LIBS) $(LDFLAGS) $(ASSEMBLY_OBJS) $(C_OBJS) $(LIBRARY_OBJS)
	$(NCC)  -save-temps -v -o $(MAIN_EXE) $(OPTFLAGS) $(PFLAGS) $(CFLAGS) $(COMPONENT).nc $(LIBS) $(LDFLAGS) $(ASSEMBLY_OBJS) $(C_OBJS) $(LIBRARY_OBJS)
	@echo "    compiled $(COMPONENT) to $(MAIN_EXE)"

builddir: FORCE
	rm -f *.o
	rm -rf $(BUILDDIR)
	mkdir -p $(BUILDDIR)

hex: FORCE
	@echo "    Converting from ELF to hex and binary"
	$(OBJCOPY) -O ihex $(MAIN_EXE) $(MAIN_HEX)
#	$(OBJCOPY) -O binary --pad-to=0x140000 -v $(MAIN_EXE) $(NXTMOTW_RFW)
	$(OBJCOPY) -O binary -v $(MAIN_EXE) $(MAIN_BIN)
#--change-start=0x100000  --pad-to=0x200000

bytes: FORCE
	@arm-elf-objdump -h $(MAIN_EXE) | perl -ne '$$b{$$1}=hex $$2 if /^\s*\d+\s*\.(text|data|bss)\s+(\S+)/; END { printf("%16d bytes in ROM\n%16d bytes in RAM\n",$$b{text}+$$b{data},$$b{data}+$$b{bss}); }'

asms: 
	$(CC) -c -mcpu=arm7tdmi -I. -Wa,-adhlns=Cstartup.lst,--gdwarf-2 -x assembler-with-cpp $(ASSEMBLY_FILES) -o $(BUILDDIR)/Cstartup.o 
#	$(CC) $(CFLAGS) $(LDFLAGS) -c $(TOSDIR)/platforms/nxtmote/c_output.c -o $(BUILDDIR)/c_output.o
#	$(CC) $(CFLAGS) $(LDFLAGS) -c $(TOSDIR)/platforms/nxtmote/d_output.c -o $(BUILDDIR)/d_output.o
#	$(CC) $(CFLAGS) $(LDFLAGS) -c $(TOSDIR)/platforms/nxtmote/c_ioctrl.c -o $(BUILDDIR)/c_ioctrl.o
#	$(CC) $(CFLAGS) $(LDFLAGS) -c $(TOSDIR)/platforms/nxtmote/d_ioctrl.c -o $(BUILDDIR)/d_ioctrl.o
#	$(CC) $(CFLAGS) $(LDFLAGS) -c $(C_FILES) -o $(BUILDDIR)/Cstartup_SAM7.o
